<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dylan&#39;s Blog</title>
  
  <subtitle>每天进步一点点</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kdylan.me/"/>
  <updated>2018-11-21T11:35:02.914Z</updated>
  <id>https://kdylan.me/</id>
  
  <author>
    <name>Dylan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue源码学习：1、入口文件</title>
    <link href="https://kdylan.me/2018/11/21/cjor295ib0000wvtct5ltws6z/"/>
    <id>https://kdylan.me/2018/11/21/cjor295ib0000wvtct5ltws6z/</id>
    <published>2018-11-21T10:58:20.000Z</published>
    <updated>2018-11-21T11:35:02.914Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue-项目结构"><a href="#vue-项目结构" class="headerlink" title="vue 项目结构"></a>vue 项目结构</h1><p>vue的源码都在src目录下，基本结构如下：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">├── compiler        # 编译相关 </span><br><span class="line">├── core            # 核心代码 </span><br><span class="line">├── platforms       # 多平台支持</span><br><span class="line">├──<span class="built_in"> server </span>         # 服务端渲染</span><br><span class="line">├── sfc             # .vue 文件解析</span><br><span class="line">├── shared          # 共享工具库</span><br></pre></td></tr></table></figure></p><ul><li>core 文件夹是项目的核心，包含全局API、虚拟DOM、Vue实例化、内置组件、生命周期、observer(观察者)等模块；</li><li>platforms 由于vue是支持多平台的，该文件夹主要存放项目在各个平台下的入口文件；<a id="more"></a></li></ul><h1 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h1><p>根据<code>package.json</code>中的build命令，可以看出该项目是采用<a href="https://www.rollupjs.com/guide/zh" target="_blank" rel="noopener">rollup</a>作为build工具；  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"dev"</span>: <span class="string">"rollup -w -c build/config.js --environment TARGET:web-full-dev"</span>,</span><br></pre></td></tr></table></figure><p>根据命令配置，找到rollup配置文件<code>build/config.js</code>，找到配置的入口文件<code>web/entry-runtime-with-compiler.js</code>：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'web-full-dev'</span>: &#123;</span><br><span class="line">    entry: resolve(<span class="string">'web/entry-runtime-with-compiler.js'</span>),</span><br><span class="line">    dest: resolve(<span class="string">'dist/vue.js'</span>),</span><br><span class="line">    format: <span class="string">'umd'</span>,</span><br><span class="line">    env: <span class="string">'development'</span>,</span><br><span class="line">    alias: &#123; <span class="attr">he</span>: <span class="string">'./entity-decoder'</span> &#125;,</span><br><span class="line">    banner</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>web/entry-runtime-with-compiler.js</code> 在<code>src/platforms</code>文件夹下</p><h1 id="入口文件"><a href="#入口文件" class="headerlink" title="入口文件"></a>入口文件</h1><p>当调用<code>import Vue from &#39;vue&#39;</code>的时候，就是调用<a href="https://github.com/vuejs/vue/blob/v2.5.13/src/platforms/web/entry-runtime-with-compiler.js" target="_blank" rel="noopener">entry-runtime-with-compiler.js</a>文件来初始化vue；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'./runtime/index'</span></span><br><span class="line"><span class="comment">// 缓存原mount函数</span></span><br><span class="line"><span class="keyword">const</span> mount = Vue.prototype.$mount</span><br><span class="line"><span class="comment">// 定义新函数</span></span><br><span class="line">Vue.prototype.$mount = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue</span><br></pre></td></tr></table></figure><ol><li>首先就是 <code>import Vue from &#39;./runtime/index&#39;</code> 引入vue，然后给vue添加了<code>$mount</code>函数，用于将vue组件挂载到相应的节点或相应的模板中；</li><li>然后查看<a href="https://github.com/vuejs/vue/blob/v2.5.13/src/platforms/web/runtime/index.js" target="_blank" rel="noopener">./runtime/index</a>文件  </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'core/index'</span></span><br><span class="line"><span class="keyword">import</span> platformUtils <span class="keyword">from</span> <span class="string">'web/util/index'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; patch &#125; <span class="keyword">from</span> <span class="string">'./patch'</span></span><br><span class="line"><span class="keyword">import</span> platformDirectives <span class="keyword">from</span> <span class="string">'./directives/index'</span></span><br><span class="line"><span class="keyword">import</span> platformComponents <span class="keyword">from</span> <span class="string">'./components/index'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加特定platform的utils</span></span><br><span class="line">Vue.config.platformUtils = platformUtils</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加特定platform的directives &amp; components</span></span><br><span class="line">extend(Vue.options.directives, platformDirectives)</span><br><span class="line">extend(Vue.options.components, platformComponents)</span><br><span class="line"></span><br><span class="line"><span class="comment">// install platform patch function</span></span><br><span class="line">Vue.prototype.__patch__ = inBrowser ? patch : noop</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义公用$mount</span></span><br><span class="line">Vue.prototype.$mount = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue</span><br></pre></td></tr></table></figure><p><code>import Vue from &#39;core/index&#39;</code> 从core核心文件夹中引入vue，然后给其添加一些扩展函数；</p><ol start="3"><li>查看<a href="https://github.com/vuejs/vue/blob/v2.5.13/src/core/index.js" target="_blank" rel="noopener">core/index</a>文件：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'./instance/index'</span></span><br><span class="line"><span class="keyword">import</span> &#123; initGlobalAPI &#125; <span class="keyword">from</span> <span class="string">'./global-api/index'</span></span><br><span class="line"><span class="keyword">import</span> &#123; isServerRendering &#125; <span class="keyword">from</span> <span class="string">'core/util/env'</span></span><br><span class="line"></span><br><span class="line">initGlobalAPI(Vue)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Vue.prototype, <span class="string">'$isServer'</span>, &#123;</span><br><span class="line">  get: isServerRendering</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Vue.prototype, <span class="string">'$ssrContext'</span>, &#123;</span><br><span class="line">  get () &#123;</span><br><span class="line">    <span class="comment">/* istanbul ignore next */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$vnode &amp;&amp; <span class="keyword">this</span>.$vnode.ssrContext</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Vue.version = <span class="string">'__VERSION__'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue</span><br></pre></td></tr></table></figure><ul><li>该文件通过<code>import Vue from &#39;./instance/index&#39;</code> 引入vue；</li><li>采用<code>initGlobalAPI</code>函数为其添加全局API，如：<code>config</code>、<code>util</code>、<code>set</code>、<code>delete</code>、<code>nextTick</code>、<code>options</code>、<code>use</code>等,详情可以查看<a href="https://github.com/vuejs/vue/blob/v2.5.13/src/core/global-api/index.js" target="_blank" rel="noopener">./instance/index</a>文件</li><li>添加<code>$isServer</code>、<code>$ssrContext</code>以及版本号属性<code>version</code></li></ul><ol start="4"><li>打开<a href="https://github.com/vuejs/vue/blob/v2.5.13/src/core/instance/index.js" target="_blank" rel="noopener">./instance/index</a>文件：  </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; initMixin &#125; <span class="keyword">from</span> <span class="string">'./init'</span></span><br><span class="line"><span class="keyword">import</span> &#123; stateMixin &#125; <span class="keyword">from</span> <span class="string">'./state'</span></span><br><span class="line"><span class="keyword">import</span> &#123; renderMixin &#125; <span class="keyword">from</span> <span class="string">'./render'</span></span><br><span class="line"><span class="keyword">import</span> &#123; eventsMixin &#125; <span class="keyword">from</span> <span class="string">'./events'</span></span><br><span class="line"><span class="keyword">import</span> &#123; lifecycleMixin &#125; <span class="keyword">from</span> <span class="string">'./lifecycle'</span></span><br><span class="line"><span class="keyword">import</span> &#123; warn &#125; <span class="keyword">from</span> <span class="string">'../util/index'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">    !(<span class="keyword">this</span> <span class="keyword">instanceof</span> Vue)</span><br><span class="line">  ) &#123;</span><br><span class="line">    warn(<span class="string">'Vue is a constructor and should be called with the `new` keyword'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>._init(options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">initMixin(Vue)</span><br><span class="line">stateMixin(Vue)</span><br><span class="line">eventsMixin(Vue)</span><br><span class="line">lifecycleMixin(Vue)</span><br><span class="line">renderMixin(Vue)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue</span><br></pre></td></tr></table></figure><p>在这里才算是看到了Vue的构造函数，然后使用几个Mixin函数，为Vue添加属性以及方法</p><p>由此可以看出一个很有意思的编程方法，可以将一个类的属性和方法按照不同的模块区分开来，然后再通过mixin函数赋值给该类，这样对于模块的划分会更精细，代码结构也会更清晰</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;vue-项目结构&quot;&gt;&lt;a href=&quot;#vue-项目结构&quot; class=&quot;headerlink&quot; title=&quot;vue 项目结构&quot;&gt;&lt;/a&gt;vue 项目结构&lt;/h1&gt;&lt;p&gt;vue的源码都在src目录下，基本结构如下：&lt;br&gt;&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;src&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── compiler        # 编译相关 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── core            # 核心代码 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── platforms       # 多平台支持&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├──&lt;span class=&quot;built_in&quot;&gt; server &lt;/span&gt;         # 服务端渲染&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── sfc             # .vue 文件解析&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── shared          # 共享工具库&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;core 文件夹是项目的核心，包含全局API、虚拟DOM、Vue实例化、内置组件、生命周期、observer(观察者)等模块；&lt;/li&gt;
&lt;li&gt;platforms 由于vue是支持多平台的，该文件夹主要存放项目在各个平台下的入口文件；
    
    </summary>
    
      <category term="学习记录" scheme="https://kdylan.me/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="vue源码学习" scheme="https://kdylan.me/tags/vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>window下使用Docker部署前端开发环境</title>
    <link href="https://kdylan.me/2018/10/01/cjor24cga000qw9tcekcy9re9/"/>
    <id>https://kdylan.me/2018/10/01/cjor24cga000qw9tcekcy9re9/</id>
    <published>2018-10-01T03:19:51.000Z</published>
    <updated>2018-10-02T04:13:11.878Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>很早之前就关注过docker，看过有关的资料，但是那时候docker并不支持window，使用需要使用 <code>docker toolbox</code> 采用<code>VirtualBox</code>虚拟机的方式来安装，觉得很麻烦，就一直没有尝试。 </p><p>最近无意中发现<code>docker for window</code>发布了，可以在win10上使用，趁着最近不忙，倒腾一下。<br><a id="more"></a></p><h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><p><code>docker for window</code> 跟 <code>docker toolbox</code> 不同，<code>docker for window</code> 依赖与微软的虚拟化技术<code>Hyper V</code>。所以我们首先要开启win10的<code>Hyper V</code>:<br>通过控制面板的<code>程序和功能</code> -&gt; <code>启用和关闭Windows</code>功能查看 Hyper V 状态：</p><p><img src="//ohm2ny54m.qnssl.com/blog/20180928163323.jpg" alt="image">  </p><p>安装非常简单，下载 <a href="https://note.youdao.com/" target="_blank" rel="noopener">docker for window</a> 下一步安装就OK了  </p><p>安装完成以后执行 <code>docker version</code> 查看安装结果</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">docker</span> <span class="string">version</span></span><br><span class="line"><span class="attr">Client:</span></span><br><span class="line"><span class="attr"> Version:</span>           <span class="number">18.06</span><span class="number">.1</span><span class="bullet">-ce</span></span><br><span class="line"> <span class="string">API</span> <span class="attr">version:</span>       <span class="number">1.38</span></span><br><span class="line"> <span class="string">Go</span> <span class="attr">version:</span>        <span class="string">go1.10.3</span></span><br><span class="line"> <span class="string">Git</span> <span class="attr">commit:</span>        <span class="string">e68fc7a</span></span><br><span class="line"><span class="attr"> Built:</span>             <span class="string">Tue</span> <span class="string">Aug</span> <span class="number">21</span> <span class="number">17</span><span class="string">:21:34</span> <span class="number">2018</span></span><br><span class="line"> <span class="string">OS/Arch:</span>           <span class="string">windows/amd64</span></span><br><span class="line"><span class="attr"> Experimental:</span>      <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Server:</span></span><br><span class="line"><span class="attr"> Engine:</span></span><br><span class="line"><span class="attr">  Version:</span>          <span class="number">18.06</span><span class="number">.1</span><span class="bullet">-ce</span></span><br><span class="line">  <span class="string">API</span> <span class="attr">version:</span>      <span class="number">1.38</span> <span class="string">(minimum</span> <span class="string">version</span> <span class="number">1.12</span><span class="string">)</span></span><br><span class="line">  <span class="string">Go</span> <span class="attr">version:</span>       <span class="string">go1.10.3</span></span><br><span class="line">  <span class="string">Git</span> <span class="attr">commit:</span>       <span class="string">e68fc7a</span></span><br><span class="line"><span class="attr">  Built:</span>            <span class="string">Tue</span> <span class="string">Aug</span> <span class="number">21</span> <span class="number">17</span><span class="string">:29:02</span> <span class="number">2018</span></span><br><span class="line">  <span class="string">OS/Arch:</span>          <span class="string">linux/amd64</span></span><br><span class="line"><span class="attr">  Experimental:</span>     <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>记录一些常用命令，其他的可以执行 <code>docker --help</code> 查看</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下载image</span></span><br><span class="line">docker pull ubuntu </span><br><span class="line"></span><br><span class="line"><span class="comment">//查看已下载image</span></span><br><span class="line">docker <span class="built_in">image</span> ls </span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除image</span></span><br><span class="line">docker <span class="built_in">image</span> rm &lt;imageName&gt;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行</span></span><br><span class="line">docker <span class="built_in">run</span> ubuntu --name ubuntu </span><br><span class="line"><span class="comment">// 使用ubuntu image 创建一个container 并设置名字为 ubuntu</span></span><br><span class="line"><span class="comment">// 运行时会检测系统中有没有该image如果没有会自动调用`docker pull unbutu`下载</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看run参数</span></span><br><span class="line">docker <span class="built_in">run</span> --help</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止ubuntu</span></span><br><span class="line">docker <span class="built_in">stop</span> ubuntu  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 进入容器</span></span><br><span class="line">docker <span class="built_in">attach</span> ubuntu</span><br></pre></td></tr></table></figure><h2 id="配置vue开发环境"><a href="#配置vue开发环境" class="headerlink" title="配置vue开发环境"></a>配置vue开发环境</h2><h4 id="1-首先打开-Docker-Hub-查找看有没有可以用的image："><a href="#1-首先打开-Docker-Hub-查找看有没有可以用的image：" class="headerlink" title="1.  首先打开 Docker Hub 查找看有没有可以用的image："></a>1.  首先打开 <a href="https://hub.docker.com/explore/" target="_blank" rel="noopener">Docker Hub</a> 查找看有没有可以用的<code>image</code>：</h4><pre><code>![ebiven/vue-cli](//ohm2ny54m.qnssl.com/blog/20180928165947.jpg)这里我们采用 [ebiven/vue-cli](https://hub.docker.com/r/ebiven/vue-cli/)  &gt; 如果没有满足自己需求的image，也可以自己制作，这个下次再说</code></pre><h4 id="2-下载-image"><a href="#2-下载-image" class="headerlink" title="2. 下载 image"></a>2. 下载 image</h4><pre><code><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ebiven/vue-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure></code></pre><h4 id="3-配置命令"><a href="#3-配置命令" class="headerlink" title="3. 配置命令"></a>3. 配置命令</h4><pre><code>众所周知，window下的命令行工具不太好用，为了便于操作，我这里使用 [cmder](http://cmder.net/) 作为命令行工具  image说明文件中的命令是linux下的命令，在window下执行会出错：<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="keyword">run</span><span class="bash"> -it --rm -v <span class="string">"<span class="variable">$PWD</span>"</span>:<span class="string">"<span class="variable">$PWD</span>"</span> -w <span class="string">"<span class="variable">$PWD</span>"</span>  -u <span class="string">"<span class="variable">$(id -u)</span>"</span> ebiven/vue-cli vue</span></span><br><span class="line"><span class="bash">docker: Error response from daemon: the working directory <span class="string">'$PWD'</span> is invalid, it needs to be an absolute path.</span></span><br><span class="line"><span class="bash">See <span class="string">'docker run --help'</span>.</span></span><br></pre></td></tr></table></figure>在window下需要使用 `%cd%` 输出当前目录，如下：<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -it <span class="params">--rm</span> -v <span class="string">"%cd%"</span>:<span class="string">/code</span> -w <span class="string">/code</span> -p 8080<span class="function">:8080</span> ebiven/vue-cli vue</span><br><span class="line"><span class="string">//</span> -it: 进行交互式操作</span><br><span class="line"><span class="string">//</span> <span class="params">--rm</span>：关闭该 container 后删除文件</span><br><span class="line"><span class="string">//</span> -v %<span class="keyword">cd</span>%:<span class="string">/code</span>: 将执行命令的目录映射到container的<span class="string">/code</span>目录</span><br><span class="line"><span class="string">//</span> -w <span class="string">/code</span>: 设置命令执行目录为<span class="string">/code</span></span><br><span class="line"><span class="string">//</span> -p 8080<span class="function">:8080</span>：将本机的8080端口映射为container的8080端口</span><br></pre></td></tr></table></figure>测试一下：<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it <span class="params">--rm</span> -v <span class="string">"%cd%"</span>:<span class="string">/code</span> -w <span class="string">/code</span> ebiven/vue-cli vue <span class="params">--version</span></span><br><span class="line">3.0.1</span><br></pre></td></tr></table></figure>执行成功！新建一个项目试试：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it <span class="comment">--rm -v "%cd%":/code -w /code ebiven/vue-cli vue create test</span></span><br><span class="line"></span><br><span class="line">Vue CLI v3.0.1</span><br><span class="line">? Please pick a preset: default (babel, eslint)</span><br><span class="line">? Pick the package manager to <span class="keyword">use</span> <span class="keyword">when</span> installing dependencies: Yarn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vue CLI v3<span class="number">.0</span><span class="number">.1</span></span><br><span class="line">✨  Creating <span class="keyword">project</span> <span class="keyword">in</span> /code/test.</span><br><span class="line">⚙  Installing CLI plugins. This might take a while...</span><br><span class="line"></span><br><span class="line">yarn <span class="keyword">install</span> v1<span class="number">.9</span><span class="number">.2</span></span><br><span class="line">info <span class="keyword">No</span> lockfile found.</span><br><span class="line">[<span class="number">1</span>/<span class="number">4</span>] Resolving packages...</span><br><span class="line">[<span class="number">2</span>/<span class="number">4</span>] Fetching packages...</span><br><span class="line">[<span class="comment">--------------------------------------------------------------------------------------------------------------------------] 0/1041(node:23) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.</span></span><br><span class="line">info fsevents@<span class="number">1.2</span><span class="number">.4</span>: The platform <span class="string">"linux"</span> <span class="keyword">is</span> incompatible <span class="keyword">with</span> this module.</span><br><span class="line">info <span class="string">"fsevents@1.2.4"</span> <span class="keyword">is</span> an optional dependency <span class="keyword">and</span> <span class="keyword">failed</span> <span class="keyword">compatibility</span> check. <span class="keyword">Excluding</span> it <span class="keyword">from</span> installation.</span><br><span class="line">[<span class="number">3</span>/<span class="number">4</span>] Linking dependencies...</span><br><span class="line">[<span class="number">4</span>/<span class="number">4</span>] Building <span class="keyword">fresh</span> packages...</span><br><span class="line"><span class="keyword">success</span> Saved lockfile.</span><br><span class="line">info <span class="keyword">To</span> <span class="keyword">upgrade</span>, run the <span class="keyword">following</span> command:</span><br><span class="line">$ curl <span class="comment">--compressed -o- -L https://yarnpkg.com/install.sh | bash</span></span><br><span class="line">Done <span class="keyword">in</span> <span class="number">162.74</span>s.</span><br><span class="line">🚀  Invoking generators...</span><br><span class="line">📦  Installing additional dependencies...</span><br><span class="line"></span><br><span class="line">yarn <span class="keyword">install</span> v1<span class="number">.9</span><span class="number">.2</span></span><br><span class="line">[<span class="number">1</span>/<span class="number">4</span>] Resolving packages...</span><br><span class="line">[<span class="number">2</span>/<span class="number">4</span>] Fetching packages...</span><br><span class="line">[<span class="comment">--------------------------------------------------------------------------------------------------------------------------] 0/1045(node:50) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.</span></span><br><span class="line">info fsevents@<span class="number">1.2</span><span class="number">.4</span>: The platform <span class="string">"linux"</span> <span class="keyword">is</span> incompatible <span class="keyword">with</span> this module.</span><br><span class="line">info <span class="string">"fsevents@1.2.4"</span> <span class="keyword">is</span> an optional dependency <span class="keyword">and</span> <span class="keyword">failed</span> <span class="keyword">compatibility</span> check. <span class="keyword">Excluding</span> it <span class="keyword">from</span> installation.</span><br><span class="line">[<span class="number">3</span>/<span class="number">4</span>] Linking dependencies...</span><br><span class="line">[<span class="number">4</span>/<span class="number">4</span>] Building <span class="keyword">fresh</span> packages...</span><br><span class="line"></span><br><span class="line"><span class="keyword">success</span> Saved lockfile.</span><br><span class="line">Done <span class="keyword">in</span> <span class="number">42.59</span>s.</span><br><span class="line">⚓  Running completion hooks...</span><br><span class="line"></span><br><span class="line">📄  Generating README.md...</span><br><span class="line"></span><br><span class="line">🎉  Successfully created <span class="keyword">project</span> test.</span><br><span class="line">👉  <span class="keyword">Get</span> started <span class="keyword">with</span> the <span class="keyword">following</span> commands:</span><br><span class="line"></span><br><span class="line"> $ cd <span class="keyword">test</span></span><br><span class="line"> $ yarn serve</span><br></pre></td></tr></table></figure>安装成功：![安装成功](//ohm2ny54m.qnssl.com/blog/20180928174039.jpg)不过，上面的命令也太长了，用起来非常不方便，可以使用`cmder`的别名功能：使用`vscode`打开cmder目录下的`config`文件夹下的`user-aliases.cmd`文件，添加如下内容:<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">node</span>=docker <span class="builtin-name">run</span> -it --rm -v <span class="string">"%cd%"</span>:/code -w /code ebiven/vue-cli node $*</span><br><span class="line"><span class="attribute">vue</span>=docker <span class="builtin-name">run</span> -it --rm -v <span class="string">"%cd%"</span>:/code -w /code -p 8080:8080 ebiven/vue-cli vue $*</span><br><span class="line"><span class="attribute">npm</span>=docker <span class="builtin-name">run</span> -it --rm -v <span class="string">"%cd%"</span>:/code -w /code ebiven/vue-cli npm $*</span><br><span class="line"><span class="attribute">yarn</span>=docker <span class="builtin-name">run</span> -it --rm -v <span class="string">"%cd%"</span>:/code -w /code -p 8080:8080 ebiven/vue-cli yarn $*</span><br><span class="line"><span class="attribute">ubuntu</span>=docker <span class="builtin-name">run</span> -it --rm -v <span class="string">"%cd%"</span>:/code -w /code ebiven/vue-cli bash</span><br></pre></td></tr></table></figure>执行一下 看看效果<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">node</span> <span class="title">--version</span></span><br><span class="line">v10.<span class="number">9.0</span></span><br><span class="line"></span><br><span class="line">$ vue --<span class="keyword">version</span></span><br><span class="line"><span class="number">3.0</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure>搞定！完全看不出来是在docker里面执行的命令。</code></pre><h4 id="4-监控文件修改"><a href="#4-监控文件修改" class="headerlink" title="4.  监控文件修改"></a>4.  监控文件修改</h4><pre><code>经过上面的配置，我们就可以在主机上使用喜欢的编辑器编辑代码，通过docker执行。但是使用 `yarn serve` 命令进行开发时，会发现一个问题：在编辑器中编辑文件后，docker无法监听到文件的修改，从而重新编译、刷新页面；我们可以采用 webpack 的轮询功能解决：在项目根目录创建`vue.config.js`文件:<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line">module.exports = &#123;</span><br><span class="line"><span class="symbol">    devServer:</span> &#123;</span><br><span class="line"><span class="symbol">        watchOptions:</span> &#123;</span><br><span class="line"><span class="symbol">            poll:</span> <span class="number">1000</span>  <span class="comment">//设置轮询时间为1秒</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>再次执行`yarn serve`即可。</code></pre><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>经过一天的折腾，基本上搭建好了开发环境，但是并没有正式开始开发，总觉得还有很多坑在等着我；而且使用docker编译vue项目的速度总觉得还不太满意，会不会采用这种开发方式，还得看以后的测试，有兴趣的也可以尝试一下。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;很早之前就关注过docker，看过有关的资料，但是那时候docker并不支持window，使用需要使用 &lt;code&gt;docker toolbox&lt;/code&gt; 采用&lt;code&gt;VirtualBox&lt;/code&gt;虚拟机的方式来安装，觉得很麻烦，就一直没有尝试。 &lt;/p&gt;
&lt;p&gt;最近无意中发现&lt;code&gt;docker for window&lt;/code&gt;发布了，可以在win10上使用，趁着最近不忙，倒腾一下。&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="https://kdylan.me/categories/Docker/"/>
    
    
      <category term="前端" scheme="https://kdylan.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Docker" scheme="https://kdylan.me/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>mongoDB 用户权限控制</title>
    <link href="https://kdylan.me/2016/12/11/cjor24cg4000gw9tc4nkmjo22/"/>
    <id>https://kdylan.me/2016/12/11/cjor24cg4000gw9tc4nkmjo22/</id>
    <published>2016-12-11T04:13:53.000Z</published>
    <updated>2018-09-27T12:43:21.029Z</updated>
    
    <content type="html"><![CDATA[<p>最近打算把 <a href="https://github.com/k-dylan/easyclub/" target="_blank" rel="noopener">EasyClub</a> 部署到vps上,由于以前一直都是在本地测试状态下,mongodb连接没有采用auth,为了部署启用auth折腾了大半天,现在记录下操作步骤.</p><ol><li>首先不加<code>-auth</code>参数,启动 mongoDB:</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod -f ~/.mongodb.conf</span><br></pre></td></tr></table></figure><a id="more"></a><ol start="2"><li>首先需要添加一个 <code>userAdminAnyDatabase</code> 用户,这是一个能够管理所有用户的的用户, 类似于超级管理员吧</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开mongo shell:</span></span><br><span class="line">mongo </span><br><span class="line"><span class="comment"># 添加管理帐号</span></span><br><span class="line">use admin  <span class="comment"># 先进入admin表</span></span><br><span class="line">db.createUser(&#123;</span><br><span class="line">  user: <span class="string">'dylan'</span>,</span><br><span class="line">  <span class="built_in">pwd</span>: <span class="string">'123456'</span>,</span><br><span class="line">  roles: [ &#123; role: <span class="string">"userAdminAnyDatabase"</span>, db: <span class="string">"admin"</span> &#125; ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment"># 查看用户是否创建成功</span></span><br><span class="line">show users</span><br><span class="line"><span class="comment"># 输出以下内容表示添加成功 </span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"_id"</span> : <span class="string">"admin.dylan"</span>,</span><br><span class="line">  <span class="string">"user"</span> : <span class="string">"dylan"</span>,</span><br><span class="line">  <span class="string">"db"</span> : <span class="string">"admin"</span>,</span><br><span class="line">  <span class="string">"roles"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"role"</span> : <span class="string">"userAdminAnyDatabase"</span>,</span><br><span class="line">      <span class="string">"db"</span> : <span class="string">"admin"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>重新打开mongodb,这次启用<code>-auth</code></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod -auth -f ~/.mongodb.conf</span><br></pre></td></tr></table></figure><ol start="4"><li>验证用户登录</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br><span class="line"><span class="comment"># 注意: 这里要验证刚才创建的用户,必须要先切换到admin库</span></span><br><span class="line">use admin</span><br><span class="line">show dbs </span><br><span class="line"><span class="comment"># 这里会报错</span></span><br><span class="line">2016-12-11T13:11:01.981+0800 E QUERY    [thread1] Error: listDatabases failed:&#123;</span><br><span class="line">  <span class="string">"ok"</span> : 0,</span><br><span class="line">  <span class="string">"errmsg"</span> : <span class="string">"not authorized on admin to execute command &#123; listDatabases: 1.0 &#125;"</span>,</span><br><span class="line">  <span class="string">"code"</span> : 13</span><br><span class="line">&#125; :</span><br><span class="line">_getErrorWithCode@src/mongo/shell/utils.js:23:13</span><br><span class="line">Mongo.prototype.getDBs@src/mongo/shell/mongo.js:53:1</span><br><span class="line">shellHelper.show@src/mongo/shell/utils.js:700:19</span><br><span class="line">shellHelper@src/mongo/shell/utils.js:594:15</span><br><span class="line">@(shellhelp2):1:1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证用户</span></span><br><span class="line">db.auth(<span class="string">'dylan'</span>, <span class="string">'123456'</span>)</span><br><span class="line">1 <span class="comment"># 输出1 表示验证成功</span></span><br><span class="line"><span class="comment"># 再次执行 </span></span><br><span class="line">show dbs </span><br><span class="line"><span class="comment"># 这次就会列出所有数据库</span></span><br></pre></td></tr></table></figure><ol start="5"><li>为数据库添加管理用户<blockquote><p>注意: 上面添加的dylan用户只有管理用户的权限,是不能管理数据库的,而管理数据库的用户都是跟这数据库的,也就是说要先进入数据库,然后为数据库单独创建用户</p></blockquote></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到要添加用户的数据库中</span></span><br><span class="line">use easyclub</span><br><span class="line">db.createUser(&#123;</span><br><span class="line">  user: <span class="string">'easy'</span>,</span><br><span class="line">  <span class="built_in">pwd</span>: <span class="string">'123456'</span>,</span><br><span class="line">  roles: [ &#123; role: <span class="string">"readWrite"</span>, db: <span class="string">"easyclub"</span> &#125; ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment"># 查看刚才创建的用户</span></span><br><span class="line">show users</span><br></pre></td></tr></table></figure><ol start="6"><li>验证创建的用户</li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">use easyclub</span><br><span class="line">show collections</span><br><span class="line"><span class="comment"># 报错</span></span><br><span class="line"><span class="number">2016</span>-<span class="number">12</span>-<span class="number">11</span>T13:<span class="number">17</span>:<span class="number">46.602</span>+<span class="number">0800</span> E QUERY    [thread1] Error: listCollections failed: &#123;</span><br><span class="line">  <span class="string">"ok"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="string">"errmsg"</span> : <span class="string">"not authorized on easyclub to execute command &#123; listCollections: 1.0, filter: &#123;&#125; &#125;"</span>,</span><br><span class="line">  <span class="string">"code"</span> : <span class="number">13</span></span><br><span class="line">&#125; :</span><br><span class="line">_getErrorWithCode@src/mongo/<span class="keyword">shell</span><span class="bash">/utils.js:23:13</span></span><br><span class="line"><span class="bash">DB.prototype._getCollectionInfosCommand@src/mongo/shell/db.js:746:1</span></span><br><span class="line"><span class="bash">DB.prototype.getCollectionInfos@src/mongo/shell/db.js:758:15</span></span><br><span class="line"><span class="bash">DB.prototype.getCollectionNames@src/mongo/shell/db.js:769:12</span></span><br><span class="line"><span class="bash">shellHelper.show@src/mongo/shell/utils.js:695:9</span></span><br><span class="line"><span class="bash">shellHelper@src/mongo/shell/utils.js:594:15</span></span><br><span class="line"><span class="bash">@(shellhelp2):1:1</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 验证</span></span></span><br><span class="line"><span class="bash">db.auth(<span class="string">'easy'</span>,<span class="string">'123456'</span>) <span class="comment"># 返回1 表示验证成功</span></span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">show collections</span></span><br><span class="line"><span class="bash">replies</span></span><br><span class="line"><span class="bash">topics</span></span><br><span class="line"><span class="bash">users</span></span><br></pre></td></tr></table></figure><blockquote><p>添加用户时的 role 有多种选项,具体可以查看这里:<a href="https://docs.mongodb.com/manual/reference/built-in-roles/" target="_blank" rel="noopener">https://docs.mongodb.com/manual/reference/built-in-roles/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近打算把 &lt;a href=&quot;https://github.com/k-dylan/easyclub/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;EasyClub&lt;/a&gt; 部署到vps上,由于以前一直都是在本地测试状态下,mongodb连接没有采用auth,为了部署启用auth折腾了大半天,现在记录下操作步骤.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先不加&lt;code&gt;-auth&lt;/code&gt;参数,启动 mongoDB:&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mongod -f ~/.mongodb.conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Node" scheme="https://kdylan.me/categories/Node/"/>
    
    
      <category term="mongodb" scheme="https://kdylan.me/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>为github Pages绑定顶级域名</title>
    <link href="https://kdylan.me/2016/11/16/cjor24cfx0006w9tcw8v5hyqz/"/>
    <id>https://kdylan.me/2016/11/16/cjor24cfx0006w9tcw8v5hyqz/</id>
    <published>2016-11-15T16:13:53.000Z</published>
    <updated>2018-09-27T12:42:45.394Z</updated>
    
    <content type="html"><![CDATA[<p>今天把自己新买的域名 <code>kdylan.me</code> 与Github Pages进行了绑定，以后就可以通过 <a href="http://kdylan.me/">kdylan.me</a> 来访问博客啦！下面记录一下绑定的过程</p><ol><li>创建<code>CNAME</code>文件<br>在网站项目repo的根目录添加<code>CNAME</code>文件，注意必须是大写，不要扩展名。然后在里面写上网址，也不需要http以及www；<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kdylan.<span class="keyword">me</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>由于是本站是采用 <code>hexo</code> 搭建而成，如果直接在github网页中添加此文件，那么下次<code>hexo g -d</code>的时候就会删除此文件，所以要把该文件创建到项目的<code>source</code>文件夹根目录，那么下次<code>hexo g -d</code>的时候，就会把该文件也生成到<code>repo</code>中；</p></blockquote><ol start="2"><li>添加域名解析 </li></ol><ul><li>首先获取域名IP，打开电脑命令行，输入<code>ping k-dylan.github.io</code> 得到IP；</li><li>在域名管理中添加两个A解析分别是<code>@</code>和<code>www</code>,IP地址填刚刚查询到的IP</li></ul><p>最后等域名解析完成后就可以使用顶级域名访问网站啦！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天把自己新买的域名 &lt;code&gt;kdylan.me&lt;/code&gt; 与Github Pages进行了绑定，以后就可以通过 &lt;a href=&quot;http://kdylan.me/&quot;&gt;kdylan.me&lt;/a&gt; 来访问博客啦！下面记录一下绑定的过程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建
      
    
    </summary>
    
      <category term="Node" scheme="https://kdylan.me/categories/Node/"/>
    
    
      <category term="github" scheme="https://kdylan.me/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>将项目web目录部署到gh-pages分支</title>
    <link href="https://kdylan.me/2016/10/19/cjor24cg7000lw9tct4gupsz4/"/>
    <id>https://kdylan.me/2016/10/19/cjor24cg7000lw9tct4gupsz4/</id>
    <published>2016-10-19T05:13:53.000Z</published>
    <updated>2016-10-19T13:45:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>在写icon-css项目的时候，需要部署一个预览页面，一般情况下可以采用github的<code>gh-pages</code>分支制作GitHub Pages，但是同一个项目里面既有源代码又预览页面文件，并不希望将源代码也添加到<code>gh-pages</code>分支中。这时就可以使用<code>git subtree</code> 功能</p><h2 id="什么是-git-subtree"><a href="#什么是-git-subtree" class="headerlink" title="什么是 git subtree"></a>什么是 git subtree</h2><p><code>git subtree</code> 是一条git子命令，可以在多个git项目之间双向同步子项目，简单的说就是：可以在一个项目中引用另外一个项目仓库中的代码<br><a id="more"></a></p><h2 id="git-subtree-如何使用"><a href="#git-subtree-如何使用" class="headerlink" title="git subtree 如何使用"></a>git subtree 如何使用</h2><p>初始化子项目<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git subtree add --prefix=用来存放子项目的文件夹 子项目库地址 分支</span><br><span class="line">// 运行后会自动把子项目分支中的代码下载到指定的文件夹中</span><br></pre></td></tr></table></figure></p><p>提交更改到子项目<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git subtree push --prefix=用来存放子项目的文件夹 子项目库地址 分支</span><br></pre></td></tr></table></figure></p><p>更新子项目新的代码到父项目<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git subtree pull --prefix=用来存放子项目的文件夹 子项目库地址 分支</span><br></pre></td></tr></table></figure></p><h2 id="部署-gh-pages-分支"><a href="#部署-gh-pages-分支" class="headerlink" title="部署 gh-pages 分支"></a>部署 gh-pages 分支</h2><p>看到这里，应该明白怎么做了吧，只要把<code>gh-pages</code>分支当做一个子项目，运行以下命令，就可以把web目录单独部署到<code>gh-pages</code>分支啦<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git subtree push --prefix dist origin gh-pages</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;在写icon-css项目的时候，需要部署一个预览页面，一般情况下可以采用github的&lt;code&gt;gh-pages&lt;/code&gt;分支制作GitHub Pages，但是同一个项目里面既有源代码又预览页面文件，并不希望将源代码也添加到&lt;code&gt;gh-pages&lt;/code&gt;分支中。这时就可以使用&lt;code&gt;git subtree&lt;/code&gt; 功能&lt;/p&gt;
&lt;h2 id=&quot;什么是-git-subtree&quot;&gt;&lt;a href=&quot;#什么是-git-subtree&quot; class=&quot;headerlink&quot; title=&quot;什么是 git subtree&quot;&gt;&lt;/a&gt;什么是 git subtree&lt;/h2&gt;&lt;p&gt;&lt;code&gt;git subtree&lt;/code&gt; 是一条git子命令，可以在多个git项目之间双向同步子项目，简单的说就是：可以在一个项目中引用另外一个项目仓库中的代码&lt;br&gt;
    
    </summary>
    
      <category term="git" scheme="https://kdylan.me/categories/git/"/>
    
    
      <category term="git" scheme="https://kdylan.me/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>基于hash和pushState的网页前端路由实现</title>
    <link href="https://kdylan.me/2016/05/21/cjor24cfz0009w9tcw43rw676/"/>
    <id>https://kdylan.me/2016/05/21/cjor24cfz0009w9tcw43rw676/</id>
    <published>2016-05-21T12:58:53.000Z</published>
    <updated>2018-09-26T13:46:53.168Z</updated>
    
    <content type="html"><![CDATA[<p>现在单页面应用是越来越流行了，而路由则是这种程序的基础，比如<code>vue-router</code>、<code>angular-router</code>等路由组件，今天我们来实现一个简单的路由类。</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul><li>支持hashURL，例如：<a href="http://test.com#/path" target="_blank" rel="noopener">http://test.com#/path</a>    </li><li>兼容History Api<a id="more"></a><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2>单页面应用需要在页面不刷新的情况下，通过更改地址栏url实现不同路由的切换，有两个api可以使用：</li><li>采用 <code>location.hash</code> 实现hash(#号)URL路由判断</li><li>采用 HTML5中的 <code>history.pushState()</code> 方法，<a href="https://developer.mozilla.org/zh-CN/docs/DOM/Manipulating_the_browser_history" target="_blank" rel="noopener">详细说明</a>;<blockquote><p>两种方式各有特点，第一个兼容性较好，可以在各种浏览器中运行，但是URL中会有一个<code>#</code>,看起来不好看，第一个是HTML5属性，只能在现代浏览器中运行；</p></blockquote></li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="配置模式"><a href="#配置模式" class="headerlink" title="配置模式"></a>配置模式</h3><p>配置路由模式，分为两种 <code>hash</code> 和 <code>history</code>，当浏览器不支持 <code>history</code>时，即使设置为 <code>histroy</code> 模式，仍然使用 <code>hash</code> 模式。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.mode = options &amp;&amp; options.mode == <span class="string">'history'</span> </span><br><span class="line">                &amp;&amp;  !!(history.pushState) ? <span class="string">'history'</span> : <span class="string">'hash'</span>;</span><br><span class="line">                </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="路由规则存储"><a href="#路由规则存储" class="headerlink" title="路由规则存储"></a>路由规则存储</h3><p>使用一个数组保存路由规则，每条路由规则对象有四个属性<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> route = &#123;</span><br><span class="line">    reg: <span class="keyword">new</span> <span class="built_in">RegExp</span>(), <span class="comment">// 路由匹配对象，通过_compile函数解析后生成</span></span><br><span class="line">    paramsName: [], <span class="comment">// 路由参数数组，保存参数名</span></span><br><span class="line">    name: <span class="string">'name'</span>, <span class="comment">// 路由名称</span></span><br><span class="line">    hander: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125; <span class="comment">// 路由执行函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="添加路由"><a href="#添加路由" class="headerlink" title="添加路由"></a>添加路由</h3><p>就是将定义的路由对象添加到routers数组中<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">path, name, hander</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> name === <span class="string">'function'</span>)&#123;</span><br><span class="line">        hander = name;</span><br><span class="line">        name = path;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> route = <span class="keyword">this</span>._compile(path);</span><br><span class="line">    <span class="keyword">this</span>.routers.push(&#123;</span><br><span class="line">        reg: route.reg,</span><br><span class="line">        paramsName: route.paramsName,</span><br><span class="line">        name: name,</span><br><span class="line">        hander: hander</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="解析路由"><a href="#解析路由" class="headerlink" title="解析路由"></a>解析路由</h3><p>也就是将定义的路由规则转换为正则表达式，便于以后匹配路由;<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">router</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> route = &#123;&#125;; <span class="comment">// 路由对象</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将/post/:postid 转换为 /post/(\w+);</span></span><br><span class="line">    <span class="keyword">var</span> paramsReg = <span class="regexp">/:(\w+)/g</span>;</span><br><span class="line">    <span class="keyword">var</span> paramsMatch = router.match(paramsReg);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(paramsMatch) &#123;</span><br><span class="line">        </span><br><span class="line">        route.paramsName = paramsMatch.map(<span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name.replace(<span class="string">':'</span>,<span class="string">''</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">        router = router.replace(<span class="regexp">/:(\w+)/g</span>, <span class="string">'(\\w+)'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    route.reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>( <span class="string">'^'</span> + router + <span class="string">'$'</span>);</span><br><span class="line">    <span class="keyword">return</span> route;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="监听路由"><a href="#监听路由" class="headerlink" title="监听路由"></a>监听路由</h3><p>也就是绑定浏览器时间，在url改变时处理获取path匹配路由<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// 绑定监听事件            </span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.mode === <span class="string">'history'</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>._addEvent(<span class="built_in">window</span>, <span class="string">'popstate'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> path = location.pathname;</span><br><span class="line">            self._check(path);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>._addEvent(<span class="built_in">window</span>, <span class="string">'hashchange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// location.hash默认返回的是带#号的hash，需要去掉#号</span></span><br><span class="line">            <span class="keyword">var</span> path = location.hash.replace(<span class="regexp">/^#/</span>,<span class="string">''</span>);</span><br><span class="line">            self._check(path);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="匹配路由"><a href="#匹配路由" class="headerlink" title="匹配路由"></a>匹配路由</h3><p>循环路由数组，发现匹配的对象，则处理路由参数，并执行路由处理函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">path</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> routers = <span class="keyword">this</span>.routers;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,len = routers.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> match = path.match(routers[i].reg);</span><br><span class="line">        <span class="comment">// 匹配成功</span></span><br><span class="line">        <span class="keyword">if</span>(match) &#123;</span><br><span class="line">            <span class="keyword">var</span> params = &#123;&#125;;</span><br><span class="line">            <span class="comment">// 组合参数</span></span><br><span class="line">            routers[i].paramsName &amp;&amp; routers[i].paramsName</span><br><span class="line">                .forEach(<span class="function"><span class="keyword">function</span> (<span class="params">name,index</span>) </span>&#123;</span><br><span class="line">                    params[name] = match[index + <span class="number">1</span>];</span><br><span class="line">                &#125;);</span><br><span class="line">            </span><br><span class="line">            routers[i].hander.call(&#123;&#125;, &#123;</span><br><span class="line">                params: params </span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 都不匹配时，如果有默认函数则执行</span></span><br><span class="line">    <span class="keyword">this</span>.defaultHander &amp;&amp; <span class="keyword">this</span>.defaultHander.call(&#123;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h3><p>基本上主要问题就这么多，最终代码已上传github</p><p><a href="https://github.com/k-dylan/SRouter" target="_blank" rel="noopener">github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在单页面应用是越来越流行了，而路由则是这种程序的基础，比如&lt;code&gt;vue-router&lt;/code&gt;、&lt;code&gt;angular-router&lt;/code&gt;等路由组件，今天我们来实现一个简单的路由类。&lt;/p&gt;
&lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;支持hashURL，例如：&lt;a href=&quot;http://test.com#/path&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://test.com#/path&lt;/a&gt;    &lt;/li&gt;
&lt;li&gt;兼容History Api
    
    </summary>
    
      <category term="javascript" scheme="https://kdylan.me/categories/javascript/"/>
    
    
      <category term="前端" scheme="https://kdylan.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="javascript" scheme="https://kdylan.me/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>js获取隐藏元素的实际宽和高</title>
    <link href="https://kdylan.me/2016/05/02/cjor24cfw0005w9tc2gz7sdiw/"/>
    <id>https://kdylan.me/2016/05/02/cjor24cfw0005w9tc2gz7sdiw/</id>
    <published>2016-05-02T04:51:45.000Z</published>
    <updated>2016-05-02T13:39:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们通常都是使用 <code>Element.offsetHeight</code> 来获取一个节点的宽和高度的，在一般的使用中是没什么问题的。但是，如果节点的 <code>display</code> 属性为 <code>none</code>话，就获取不到实际的宽高了，获取到的数据就是0；<br><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/xyy7c7am/embedded/result,html,css,js/light" frameborder="0" allowfullscreen></iframe></p><blockquote><p>那如何才能获取到实际的宽高呢？<br><a id="more"></a></p></blockquote><p>由于节点为 <code>display:none</code>的情况下，浏览器是不渲染这个节点的，自然就获取不到节点的大小了，所以我们要想获取到这个节点的大小，首先就要让浏览器渲染这个节点，那么就要把 <code>display</code> 设置为 <code>block</code> ,获取到大小，再隐藏这个节点就行了。但是这样节点就显示隐藏，有时会造成浏览器闪屏，所以我们还需要用到另外一个属性 <code>visibility</code>, <code>visibility</code> 设置为 <code>hidden</code> 时，浏览器可以获取节点的大小，却不显示这个节点。</p><p>不过还有一个问题，如果设置为 <code>visibility：hidden</code> 的话，节点的位置是要空出来了，而且有可能会造成布局错乱。所以需要将节点从正常的文档流中脱离，即使用 <code>position:absolute</code>;</p><p>所以具体实现如下：</p><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/d95kks5k/embedded/result,html,css,js/light" frameborder="0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们通常都是使用 &lt;code&gt;Element.offsetHeight&lt;/code&gt; 来获取一个节点的宽和高度的，在一般的使用中是没什么问题的。但是，如果节点的 &lt;code&gt;display&lt;/code&gt; 属性为 &lt;code&gt;none&lt;/code&gt;话，就获取不到实际的宽高了，获取到的数据就是0；&lt;br&gt;&lt;iframe scrolling=&quot;no&quot; width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//jsfiddle.net/xyy7c7am/embedded/result,html,css,js/light&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;那如何才能获取到实际的宽高呢？&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://kdylan.me/categories/javascript/"/>
    
    
      <category term="前端" scheme="https://kdylan.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="javascript" scheme="https://kdylan.me/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>CSS3中使用transition过渡动画高度自适应的问题</title>
    <link href="https://kdylan.me/2016/05/01/cjor24cfq0001w9tci0gqtbzk/"/>
    <id>https://kdylan.me/2016/05/01/cjor24cfq0001w9tci0gqtbzk/</id>
    <published>2016-05-01T03:19:51.000Z</published>
    <updated>2016-05-01T14:36:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个项目的时候，需要为一个列表添加个slideDown的动画，容器的高度是不确定的，如果用jquery实现的话很简单：<br><a id="more"></a><br><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/dhwfmbmx/embedded/result,html,css,js/light" frameborder="0" allowfullscreen></iframe></p><p>而用CSS3实现的话，由于高度的不确定，而 <code>transtion</code> 是需要具体的树枝，所以设置 <code>height:auto</code> 是无法实现效果的，可以通过 <code>max-height</code> 这个属性间接的实现这么个效果，css样式是这样的：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bd</span> &#123; </span><br><span class="line">    <span class="attribute">display</span>:none;</span><br><span class="line">    <span class="attribute">max-height</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;</span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">6s</span> ease-out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.show</span> &#123;</span><br><span class="line">    <span class="attribute">max-height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">transition-timing-function</span>: ease-in;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体效果：<br><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/w1mw829k/embedded/result,html,css,js/light" frameborder="0" allowfullscreen></iframe></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做一个项目的时候，需要为一个列表添加个slideDown的动画，容器的高度是不确定的，如果用jquery实现的话很简单：&lt;br&gt;
    
    </summary>
    
      <category term="css" scheme="https://kdylan.me/categories/css/"/>
    
    
      <category term="前端" scheme="https://kdylan.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="https://kdylan.me/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Hexo部署到Github上文件夹的大小写问题</title>
    <link href="https://kdylan.me/2016/02/19/cjor24cg0000aw9tc8k2n2b0n/"/>
    <id>https://kdylan.me/2016/02/19/cjor24cg0000aw9tc8k2n2b0n/</id>
    <published>2016-02-19T15:59:23.000Z</published>
    <updated>2016-02-19T16:21:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在倒腾使用<code>hexo</code>在github上搭建个博客，发现一个挺有意思的问题：</p><p>在写文章的时候，有个分类名开始起名为：<code>http</code>，后来感觉小写不好看，就给改成了大写<code>HTTP</code>，提交到github上之后就发现出问题了，http分类页面变成404了！</p><p>经过排查问题发现github上的目录名为<code>http</code>，而分类请求的目录名为<code>HTTP</code>，而Github Pages是区分大小写的，所以造成找不到文件出现404错误！</p><p>通过检查hexo生成的<code>.deploy_git</code>文件夹内的文件名是大写的，而使用<code>hexo d</code>提交到github上之后的目录还是小写，这是因为git默认是忽略大小写的！</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol><li>删除<code>.deploy_git</code>目录</li><li>再次运行<code>hexo d</code>提交，hexo会重置git仓库，并重新生成所有文件!</li><li>打开github查看，问题解决！</li></ol><blockquote><p>可以使用下面语句设置git大小写敏感，防止下次出现这样的问题：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config core.ignorecase <span class="literal">false</span></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在倒腾使用&lt;code&gt;hexo&lt;/code&gt;在github上搭建个博客，发现一个挺有意思的问题：&lt;/p&gt;
&lt;p&gt;在写文章的时候，有个分类名开始起名为：&lt;code&gt;http&lt;/code&gt;，后来感觉小写不好看，就给改成了大写&lt;code&gt;HTTP&lt;/code&gt;，提交到gith
      
    
    </summary>
    
      <category term="Node" scheme="https://kdylan.me/categories/Node/"/>
    
    
      <category term="Hexo" scheme="https://kdylan.me/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>express中使用ejs</title>
    <link href="https://kdylan.me/2016/02/17/cjor24cfu0004w9tc3wwn07so/"/>
    <id>https://kdylan.me/2016/02/17/cjor24cfu0004w9tc3wwn07so/</id>
    <published>2016-02-16T16:13:53.000Z</published>
    <updated>2016-02-19T15:49:57.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、使用express命令初始化项目"><a href="#1、使用express命令初始化项目" class="headerlink" title="1、使用express命令初始化项目"></a>1、使用express命令初始化项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ express -e ejs [后面可以添加项目名称，添加的话 会创建项目文件夹，不添加就在当前文件夹内]</span><br></pre></td></tr></table></figure><h3 id="2、启用ejs的layout模板"><a href="#2、启用ejs的layout模板" class="headerlink" title="2、启用ejs的layout模板"></a>2、启用ejs的layout模板</h3><p>express3以上默认把layout给去掉了，所以现在文件夹下没有layout.ejs文件</p><h4 id="安装express-partials"><a href="#安装express-partials" class="headerlink" title="安装express-partials"></a>安装express-partials</h4><p>在package.json里面的dependencies中添加 <code>&quot;express-partials&quot; : &quot;*&quot;</code> 。然后再项目目录下运行<code>npm install</code></p><h4 id="在项目中引用express-partials"><a href="#在项目中引用express-partials" class="headerlink" title="在项目中引用express-partials"></a>在项目中引用express-partials</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> partials = <span class="built_in">require</span>(<span class="string">'express-partials'</span>);</span><br><span class="line"><span class="comment">//在app.set('view engine', 'ejs'); 下面添加</span></span><br><span class="line">app.use(partials());</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="3、使用方法"><a href="#3、使用方法" class="headerlink" title="3、使用方法"></a>3、使用方法</h3><p>在需要引用模板的地方调用 layout:’模板名称’</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/reg'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123; </span><br><span class="line">    res.render(<span class="string">'reg'</span>, &#123; </span><br><span class="line">        title: <span class="string">'用户注册'</span>, </span><br><span class="line">        layout: <span class="string">'template'</span></span><br><span class="line">     &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、使用express命令初始化项目&quot;&gt;&lt;a href=&quot;#1、使用express命令初始化项目&quot; class=&quot;headerlink&quot; title=&quot;1、使用express命令初始化项目&quot;&gt;&lt;/a&gt;1、使用express命令初始化项目&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ express -e ejs [后面可以添加项目名称，添加的话 会创建项目文件夹，不添加就在当前文件夹内]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2、启用ejs的layout模板&quot;&gt;&lt;a href=&quot;#2、启用ejs的layout模板&quot; class=&quot;headerlink&quot; title=&quot;2、启用ejs的layout模板&quot;&gt;&lt;/a&gt;2、启用ejs的layout模板&lt;/h3&gt;&lt;p&gt;express3以上默认把layout给去掉了，所以现在文件夹下没有layout.ejs文件&lt;/p&gt;
&lt;h4 id=&quot;安装express-partials&quot;&gt;&lt;a href=&quot;#安装express-partials&quot; class=&quot;headerlink&quot; title=&quot;安装express-partials&quot;&gt;&lt;/a&gt;安装express-partials&lt;/h4&gt;&lt;p&gt;在package.json里面的dependencies中添加 &lt;code&gt;&amp;quot;express-partials&amp;quot; : &amp;quot;*&amp;quot;&lt;/code&gt; 。然后再项目目录下运行&lt;code&gt;npm install&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;在项目中引用express-partials&quot;&gt;&lt;a href=&quot;#在项目中引用express-partials&quot; class=&quot;headerlink&quot; title=&quot;在项目中引用express-partials&quot;&gt;&lt;/a&gt;在项目中引用express-partials&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; partials = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;express-partials&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//在app.set(&#39;view engine&#39;, &#39;ejs&#39;); 下面添加&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.use(partials());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Node" scheme="https://kdylan.me/categories/Node/"/>
    
    
      <category term="Node" scheme="https://kdylan.me/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Mac下Apache和php的配置</title>
    <link href="https://kdylan.me/2016/02/15/cjor24cg3000ew9tcriphqzt9/"/>
    <id>https://kdylan.me/2016/02/15/cjor24cg3000ew9tcriphqzt9/</id>
    <published>2016-02-15T03:19:51.000Z</published>
    <updated>2016-02-17T08:24:14.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>osX系统是默认自带的有php和apache的 </p></blockquote><h2 id="1、启动Apache"><a href="#1、启动Apache" class="headerlink" title="1、启动Apache"></a>1、启动Apache</h2><p>打开终端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">开启apache命令：sudo apachectl start</span><br><span class="line">关闭apache命令：sudo apachectl stop</span><br><span class="line">重启apache命令：sudo apachectl restart</span><br></pre></td></tr></table></figure><p>启用apache后，可以直接在浏览器访问<code>http://localhost</code>，出现“<code>It works！</code>”表示运行正常。</p><ol start="3"><li><p>用户级的根目录是：<code>~Sites</code>，也就是站点目录。在 OS X Mountain Lion 中，这个目录可能没有，所以你需要手动建立一个同名目录。建立方式很简单，直接在终端中运行：<code>sudo mkdir Sites</code></p></li><li><p>建立”站点”文件夹之后，检查下面这个文件夹下面是不是有”<code>你的用户名.conf</code>”这个文件。</p></li></ol><p>如果没有，那么你需要创建一个，取名为“<code>dylan.conf</code>”，可以使用 vi 或者 nano 这两种编辑器之一来创建。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/apache2/users/haibor.conf</span><br></pre></td></tr></table></figure><a id="more"></a><p>创建之后将下面的这几行内容写到上面的 conf 文件中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Directory</span> "/<span class="attr">Users</span>/<span class="attr">haibor</span>/<span class="attr">Sites</span>/"&gt;</span></span><br><span class="line">    Options Indexes MultiViews</span><br><span class="line">    AllowOverride All</span><br><span class="line">    Order allow,deny</span><br><span class="line">    Allow from all</span><br><span class="line"><span class="tag">&lt;/<span class="name">Directory</span>&gt;</span></span><br></pre></td></tr></table></figure><p>文件保存之后，给它赋予相应的权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 755 /etc/apache2/users/haibor.conf</span><br></pre></td></tr></table></figure><p>接下来重启 Apache，以使该配置文件生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apachectl restart</span><br></pre></td></tr></table></figure><p>之后你就可以通过浏览器访问你的用户级目录网页了，你可以随便防个网页进去测试一下。根目录地址为：</p><p><a href="http://localhost/~haibor/" target="_blank" rel="noopener">http://localhost/~haibor/</a></p><blockquote><p>也可以更改根目录，但要记得给新文件夹设置，文件夹需要有执行权限x，设置了755就可以了：</p></blockquote><blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /Users/<span class="keyword">user</span>/workspace</span><br><span class="line">mod <span class="number">755</span> /<span class="keyword">User</span>/<span class="keyword">user</span>/workspace</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><code>etc/apache2/httpd.conf</code>文件里的 <code>/Library/WebServer/Documents</code> 都替换成自己的路径，比如 <code>/User/user/workspace</code></p></blockquote><blockquote><p>重启Apache：<code>apachectl restart</code>，再次访问 <a href="http://localhost/" target="_blank" rel="noopener">http://localhost/</a> 即显示的是更改后的文件里的内容了。</p></blockquote><h2 id="二、开启-PHP"><a href="#二、开启-PHP" class="headerlink" title="二、开启 PHP"></a>二、开启 PHP</h2><p>OS X 中已经集成了 PHP 5.4.30 版本，需要手动开启。你可以用 <code>vi</code> 或者 <code>nano</code> 编辑器打开下面这个文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano <span class="regexp">/etc/</span>apache2<span class="regexp">/httpd.conf</span></span><br></pre></td></tr></table></figure><p>然后按ctl+W进行查找，搜索”php”，第一条匹配的应该是下面这句代码：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LoadModule php5_module libexec/apache2/libphp5.so</span><br></pre></td></tr></table></figure><p>请将这句代码前面的#去掉，然后保存文件。</p><p>接下来再一次重启 Apache：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo apachectl restart</span></span><br></pre></td></tr></table></figure><p>现在 PHP 应该已经开始工作了，你可以在用户级根目录下(~/Sites/)放一个PHP测试文件，代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> phpinfo(); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、安装-MySQL"><a href="#三、安装-MySQL" class="headerlink" title="三、安装 MySQL"></a>三、安装 MySQL</h2><p>OS X 中并没有集成 Mysql，需要手动安装。你可以点击 <a href="http://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">http://dev.mysql.com/downloads/mysql/</a> 去官网下载 MySQL 的安装包。</p><p>请下载 <code>Mac OS X 10.7 (x86, 64-bit).DMG Archive</code>  （如有更新版本，可下载）。</p><p>下载完DMG之后，双击你会提取出三个文件和一个 <code>ReadMe.txt</code> 文档。这三个文件分别是：</p><blockquote><p>mysql-5.6.15-osx10.7-x86_64.pkg<br>MySQLstartupitem.pkg<br>MySQL.PrefPane</p></blockquote><p>你需要逐一安装这三个文件，<code>MySQLStartupItem.pkg</code> 安装后，mysql会随系统启动而自启动，<code>MySQL.prefPane</code> 表示可以在系统偏好设置中看到mysql选项，还有一个就是mysql的安装项。</p><p>三个文件都安装完成之后，进入<code>系统偏好设置</code>，在面板的最下面你会看到一个 MySQL 的设置项，点击它之后就可以启动MySQL。</p><p>也可以通过命令开启mysql：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/<span class="built_in">local</span>/mysql/support-<span class="built_in">files</span>/mysql.server <span class="built_in">start</span></span><br></pre></td></tr></table></figure></p><p>如果你想查看 MySQL 的版本，可以用下面这个命令：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/mysql/</span>bin<span class="regexp">/mysql -v</span></span><br></pre></td></tr></table></figure></p><p>运行上面这个命令之后，会直接从命令行中登录到 MySQL，输入命令 \q 即可退出。</p><p>到这里 MySQL 已经配置完成，并且可以运行。</p><blockquote><p>为了更加方便使用，最好再设置一下系统环境变量，也就是让 mysql 这个命令在任何路径都可以直接启动(不需要输入一长串的准确路径)。</p></blockquote><blockquote><p>设置环境变量也很方便，直接用命令(这里用 vi 编辑器举例)：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> vi .bash_profile</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>如果没有这个文件，就要先创建一个<br>进入当前用户的home目录<br>输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">//创建.bash_profile</span><br><span class="line">touch .bash_profile</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>然后按字母 i 进入编辑模式，将下面的这句代码贴进去：<br>  <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="string">"/usr/local/mysql/bin:<span class="variable">$PATH</span>"</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>然后按 <code>esc</code> 退出编辑器，再输入 <code>:wq</code>(别忘了冒号)保存退出。当然你如果使用 <code>nano</code> 或者别的编辑器的话，操作方式跟这个可能不一样，反正意思就是将上面那句话写入到 <code>.bash_profile</code> 文件中。</p></blockquote><blockquote><p>接下来还要重新加载一下 <code>Shell</code> 以让上面的环境变量生效：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>之后你就可以在终端的任意目录使用 mysql 命令了，你可以运行 <code>mysql -v</code>试试。</p></blockquote><blockquote><p>最后一步，安装好后默认的用户名是root，密码为空，你还应该给你的 MySQL 设置一个 <code>root</code> 用户密码，命令如下：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mysqladmin</span> -u root password <span class="string">'这里填你要设置的密码'</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>(请记住密码一定要用半角单引号包起来)</p></blockquote><blockquote><p>上面的 mysqladmin 命令，我没有写完整路径。因为上面我们已经设置了环境变量，如果你没有设置环境变量的话，就需要用/usr/local/mysql/bin/mysqladmin <strong><em>**</em></strong> 来运行。</p></blockquote><h2 id="四、安装-phpMyAdmin-或-adminer"><a href="#四、安装-phpMyAdmin-或-adminer" class="headerlink" title="四、安装 phpMyAdmin 或 adminer"></a>四、安装 phpMyAdmin 或 adminer</h2><p>在安装 phpMyAdmin 之前，请首先修复 2002 socket 错误：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir <span class="regexp">/var/my</span>sql</span><br><span class="line">sudo ln -s <span class="regexp">/tmp/my</span>sql.sock <span class="regexp">/var/my</span>sql<span class="regexp">/mysql.sock</span></span><br></pre></td></tr></table></figure></p><p>接着可以在 <code>phpMyAdmin</code> 官网下载安装包，推荐下载 <code>english.tar.gz</code>，也可以下载 <code>all-languages.tar.gz</code> 使用中文版，解压之后，将解压出来的文件夹改名为<code>phpmyadmin</code>，并放到上面建立的”站点”目录下(~/Sites)。</p><p>然后在 <code>phpmyadmin</code> 下建立一个 <code>config</code> 文件夹：<br>到这里就算完成了，接下来你就可以访问 <a href="http://localhost/~haibor/phpmyadmin/" target="_blank" rel="noopener">http://localhost/~haibor/phpmyadmin/</a> </p><p>来通过 <code>phpmysql</code> 管理你的数据库了。 </p><p>也可以使用 <code>adminer</code> 来管理，很方便的说，推荐相关文章 轻量级主流数据库Web端管理工具<code>Adminer</code>。</p><h2 id="五、设置虚拟主机"><a href="#五、设置虚拟主机" class="headerlink" title="五、设置虚拟主机"></a>五、设置虚拟主机</h2><p>配置 Apache 文件：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="keyword">vi</span> /etc/apache2/httpd.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure></p><p>在 <code>httpd.conf</code> 中找到 <code>#Include /private/etc/apache2/extra/httpd-vhosts.conf</code>，去掉前面的“＃”，“:wq!” 保存并退出。</p><p>重启 Apache：<code>sudo apachectl restart</code>。</p><p>配置虚拟主机文件 <code>httpd-vhost.conf</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi <span class="regexp">/etc/</span>apache2<span class="regexp">/extra/</span>httpd-vhosts.conf</span><br></pre></td></tr></table></figure><p>实际上，这两个虚拟主机是不存在的，在没有配置任何其他虚拟主机时，可能会导致访问localhost时出现如下提示：</p><blockquote><p>Forbidden You don’t have permission to access /index.php on this server</p></blockquote><p>最简单的办法就是在它们每行前面加上#，注释掉就好了，这样既能参考又不导致其他问题。</p><h2 id="六、关于-php-ini"><a href="#六、关于-php-ini" class="headerlink" title="六、关于 php.ini"></a>六、关于 php.ini</h2><p>先复制一份 php.ini，然后就可以通过php.ini来配置各种PHP功能了。<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp <span class="regexp">/etc/</span>php.ini.<span class="keyword">default</span> <span class="regexp">/etc/</span>php.ini</span><br></pre></td></tr></table></figure></p><p>例如修改 <code>upload_max_filesize</code>、<code>memory_limit</code>、<code>post_max_size</code> 三项值，来调整PHP提交文件的最大值，比如<code>phpMyAdmin</code> 中导入数据的最大值。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;osX系统是默认自带的有php和apache的 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1、启动Apache&quot;&gt;&lt;a href=&quot;#1、启动Apache&quot; class=&quot;headerlink&quot; title=&quot;1、启动Apache&quot;&gt;&lt;/a&gt;1、启动Apache&lt;/h2&gt;&lt;p&gt;打开终端：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;开启apache命令：sudo apachectl start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;关闭apache命令：sudo apachectl stop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;重启apache命令：sudo apachectl restart&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;启用apache后，可以直接在浏览器访问&lt;code&gt;http://localhost&lt;/code&gt;，出现“&lt;code&gt;It works！&lt;/code&gt;”表示运行正常。&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;&lt;p&gt;用户级的根目录是：&lt;code&gt;~Sites&lt;/code&gt;，也就是站点目录。在 OS X Mountain Lion 中，这个目录可能没有，所以你需要手动建立一个同名目录。建立方式很简单，直接在终端中运行：&lt;code&gt;sudo mkdir Sites&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;建立”站点”文件夹之后，检查下面这个文件夹下面是不是有”&lt;code&gt;你的用户名.conf&lt;/code&gt;”这个文件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果没有，那么你需要创建一个，取名为“&lt;code&gt;dylan.conf&lt;/code&gt;”，可以使用 vi 或者 nano 这两种编辑器之一来创建。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo vi /etc/apache2/users/haibor.conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://kdylan.me/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://kdylan.me/tags/PHP/"/>
    
      <category term="Mac" scheme="https://kdylan.me/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>URI和URL的区别</title>
    <link href="https://kdylan.me/2016/02/07/cjor24cfm0000w9tc2sdn3bi0/"/>
    <id>https://kdylan.me/2016/02/07/cjor24cfm0000w9tc2sdn3bi0/</id>
    <published>2016-02-07T03:19:51.000Z</published>
    <updated>2016-02-19T15:50:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>URI：是<code>uniform resource identifier</code>，统一资源标识符，用来唯一的标识一个资源；</p><p>URL: 是<code>uniform resource locator</code>，统一资源定位器，它是一种具体的URI；</p><blockquote><p>URL可以用来标识一个资源，而且还指明如何如何locator这个资源。<br>URI是一种抽象的，更高层次的概念定义统一资源标识，而URL则是具体的资源标识方式</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;URI：是&lt;code&gt;uniform resource identifier&lt;/code&gt;，统一资源标识符，用来唯一的标识一个资源；&lt;/p&gt;
&lt;p&gt;URL: 是&lt;code&gt;uniform resource locator&lt;/code&gt;，统一资源定位器，它是一种具体的URI；
      
    
    </summary>
    
      <category term="HTTP" scheme="https://kdylan.me/categories/HTTP/"/>
    
    
      <category term="前端" scheme="https://kdylan.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="url" scheme="https://kdylan.me/tags/url/"/>
    
  </entry>
  
</feed>
